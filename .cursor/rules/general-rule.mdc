---
description:
globs:
alwaysApply: true
---

## 基本方針
- 既存の実装が多くあるので、コーディングスタイルや実装方法など、できるだけ既存実装に沿うように実装してください。流用できる関数があれば積極的に流用してください。
- 実装後は `npm run lint` で lint error を修正してください

### 実装の優先順位

- 明示的に指示された機能を最優先で実装してください。
- 拡張機能や追加機能は、コア機能の実装後に検討してください。
- 機能追加による複雑性の増加は、常にユーザーのメリットと比較検討してください。

### コミュニケーション

- 仕様の不明点がある場合は、仮定を立てて進めるのではなく、質問して明確にしてください。
- 複数の解釈が可能な指示については、最も一般的なユースケースに基づいて判断を行い、その判断基準を明示してください。
- 技術的な制約により指示通りの実装が難しい場合は、代替案を提示して承認を得てください。

### 実装がうまく通らない時は
- 既存実装が参考になることが多いので、既存実装からヒントを得るようにしてください。

### Gitコマンドの使用
- Cursor Editorでは、インタラクティブなGitコマンド（`git log`, `git diff`, `less`など）は正常に表示されません。
- これらのコマンドを使用する場合は、`| cat`を追加してパイプで出力をリダイレクトしてください。
  - 例：`git log -n 5 | cat`
  - 例：`git diff HEAD~1 | cat`
- もしくは`--no-pager`オプションを使用してください。
  - 例：`git --no-pager log -n 5`
- 複雑な操作が必要な場合は、ターミナルを別ウィンドウで開いて実行することを検討してください。

### コミットメッセージの規約
- コミットメッセージは英語で記述し、プレフィックスを付けてください。
- 以下のプレフィックスを使用してください：
  - `feat:` - 新機能の追加
  - `fix:` - バグ修正
  - `docs:` - ドキュメントの変更
  - `style:` - コードスタイルの変更（フォーマットなど、機能に影響しない変更）
  - `refactor:` - リファクタリング（バグ修正や機能追加を含まない変更）
  - `test:` - テストの追加・修正
  - `chore:` - ビルドプロセスやツールの変更、依存関係の更新など
- 例：`feat: add new feature for issue links`
- 例：`fix: resolve bug in issue number extraction`
- 例：`chore: update dependencies and build configuration`

## テスト方針
- なるべくmockは行わずにtestを書いてください
- service層のテストもしっかり書いてください
- テストを実行しながら想定通りの動きをしているのか確認しながら進めていきましょう
